{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["List","props","react_default","a","createElement","className","items","map","item","index","key","href","onClick","handleDelete","bind","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","event","setState","term","target","value","onSubmit","preventDefault","concat","toConsumableArray","state","onReset","taskToDelete","newItems","filter","_item","prevProps","prevState","_input","focus","_this2","src","logo","alt","type","name","id","placeholder","required","autoComplete","autofocus","ref","c","App_List","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.47d75b82.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// Liste des taches \nconst List = props => (\n  <ul className=\"app-list\">\n    {\n      props.items.map((item, index) => <li key={index}>{item}\n\n        <a href=\"#\" className=\"delete-btn\" onClick={ props.handleDelete.bind(null,item)} > X </a>\n\n        </li>)\n    }\n  </ul>\n);\n\n\n\nexport default class App extends React.Component {\n  \n  // Initialisation \n  constructor(props) {\n    super(props);\n      this.state = {\n      term: '',\n      items: []\n    };\n   \n  }\n  \n\n// Insertion et ajout d'une tache \n  onChange = (event) => {\n    this.setState({term: event.target.value});\n  }\n\n  onSubmit = (event) => {\n    event.preventDefault()\n    this.setState({\n      term: '',\n      items: [...this.state.items, this.state.term]\n    });\n  }\n\n // handleDelete : suppression de la tache \n\n  handleDelete (taskToDelete){\n      var newItems = this.state.items.filter((_item)=>{\n      return _item !== taskToDelete\n    });\n      this.setState({ items : newItems});  \n}\n// Suppression de toutes les taches (reinitialisation de items[] Ã  null)\n\n  onReset = (event) => {\n    event.preventDefault()\n    this.setState({\n       items : [] \n    });\n  }\n\n\n// Auto focus sur l'input\n componentDidUpdate(prevProps, prevState) {\n    this._input.focus();\n  }\n\n\n\n  render() {\n\n\n    return (\n\n\n      \n      <div className=\"App\">\n       <header className=\"App-header\">\n         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <fieldset className=\"App-field\">\n           <form onSubmit={this.onSubmit} >\n             <div>\n               <input \n                  type=\"text\" \n                  name=\"task\" \n                  id=\"task\" \n                  placeholder=\"Adding a new task\" \n                  value={this.state.term} \n                  onChange={this.onChange}\n                  required \n                  autoComplete=\"off\"\n                  autofocus=\"true\"\n                  ref={c => (this._input = c)}  \n                />\n         \n               <button className=\"add-btn\" name=\"add\" id=\"add\" > + </button>\n               \n               <List  items={this.state.items}   handleDelete={this.handleDelete.bind(this)} />\n             \n             </div>\n           </form>\n         \n\n           <form onSubmit={this.onReset}>\n             <button className=\"clear-btn\"   > Remove All </button>\n           </form>\n         \n        </fieldset>\n      </header>\n    </div>\n\n   \n      \n    );\n  }\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.49b5a5d5.svg\";"],"sourceRoot":""}